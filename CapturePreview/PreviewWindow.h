/* -LICENSE-START-
** Copyright (c) 2013 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once
#include "DeckLinkAPI_h.h"
#include <stdio.h>
#include <string>
#include <map>

#include "live_stitch_api.h"
#include <CL/cl_ext.h>
#include "CapturePreviewDlg.h"
class PreviewWindow : public IDeckLinkScreenPreviewCallback
{
private:
	CCapturePreviewDlg*					m_uiDelegate;
	IDeckLinkGLScreenPreviewHelper*		m_deckLinkScreenPreviewHelper;
	CStatic*							m_previewBox;
	CDC*								m_previewBoxDC;
	HGLRC								m_openGLctx;
	LONG								m_refCount;

	bool								initOpenGL();

public:
	PreviewWindow(CCapturePreviewDlg *ui);
	~PreviewWindow();

	// Initialise members and OpenGL rendering context
	bool								init(CStatic* previewBox);
	//Initialise Stitching Context, OpenVX and OpenCL rendering context


	//	bool                                 initStitching();

	// IUnknown only needs a dummy implementation
	virtual HRESULT STDMETHODCALLTYPE	QueryInterface(REFIID iid, LPVOID *ppv) { return E_NOINTERFACE; }
	virtual ULONG	STDMETHODCALLTYPE	AddRef() { return 1; }
	virtual ULONG	STDMETHODCALLTYPE	Release() { return 1; }

	// IDeckLinkScreenPreviewCallback
	virtual HRESULT STDMETHODCALLTYPE	DrawFrame(IDeckLinkVideoFrame* theFrame);

	// for stitching by kevin

protected:
	//	virtual int OnCommand();

	//private:
	//	const char * ParseIndex(const char * s, const char * prefix, vx_uint32& index, vx_uint32 count);
	//	const char * ParseUInt(const char * s, vx_uint32& value);
	//	const char * ParseInt(const char * s, vx_int32& value);
	//	const char * ParseFloat(const char * s, vx_float32& value);
	//	const char * ParseWord(const char * s, char * value, size_t size);
	//	const char * ParseString(const char * s, char * value, size_t size);
	//	const char * ParseSkipPattern(const char * s, const char * pattern);
	//	const char * ParseSkip(const char * s, const char * charList);
	//	const char * ParseEndOfLine(const char * s);
	//	const char * ParseContextWithErrorCheck(const char * s, vx_uint32& index, const char * syntaxError);
	//	const char * ParseFormat(const char * s, vx_df_image& format);
	//	int ReleaseAllResources();
	//	public:
	//
	//		int Error(const char * format, ...);
	//		void Message(const char * format, ...);
	//		unsigned char des_buffer[1920 * 1080 * 3];
	//		
	//
	//
	//private:
	//	bool decl_ls_disabled, decl_vx_disabled, decl_cl_disabled, decl_buf_disabled;
	//	char name_ls[64], name_vx[64], name_cl[64], name_buf[64];
	//	 vx_uint32 num_context_, num_openvx_context_, num_opencl_context_, num_opencl_buf_;
	//	ls_context * context_;
	//	vx_context * openvx_context_;
	//	cl_context * opencl_context_;
	//	bool * openvx_context_allocated_;
	//	bool * opencl_context_allocated_;
	//	cl_mem * opencl_buf_mem_;
	//	std::map<std::string, camera_params> camParList;
	//	std::map<std::string, rig_params> rigParList;
	//	vx_float32 attr_buf_[LIVE_STITCH_ATTR_MAX_COUNT];



};

